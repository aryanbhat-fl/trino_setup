openapi: 3.0.3

info: 
  title: TODO API
  description: "APIs to perform CRUD operations on todos"
  version: 0.1.1
  
servers: 
  - url: http://localhost:3000/api/v0
    description: Development Server
    
paths: 
  /lists: 
    get:
      summary: Get all todos
      description: Returns a paginated list of all todos.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: The page number (starting from 1).
        - name: per-page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: The number of results per page.
      responses: 
        "200": 
          description: A JSON object containing a list of todos.
          content:
            application/json: 
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                  total_count:
                    type: integer
                    example: 100
        "500": 
          description: Internal server error.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-pagination:
        pageParam: "page"
        limitParam: "per-page"
        resultsPath: "$response.body#/data"
        totalResultsPath: "$response.body#/total_count"
  
  /todos:  
    post:
      summary: Create a new todo
      description: Adds a new todo to the list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - content
              properties:
                content:
                  type: string
                  example: "Buy groceries"
                is_completed:
                  type: boolean
                  default: false
      responses:
        "201":
          description: Todo created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Todo created successfully"
                  data:
                    $ref: '#/components/schemas/Todo'
        "400":
          description: Bad request, invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /todos/{id}:
    get:
      summary: Get a single todo
      description: Returns a specific todo by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The unique identifier of the todo.
      responses:
        "200":
          description: Successfully retrieved the todo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        "404":
          description: Todo not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a todo
      description: Removes a todo by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The unique identifier of the todo.
      responses:
        "200":
          description: Todo deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Todo deleted successfully"
        "404":
          description: Todo not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update a todo
      description: Updates a todo by its ID.
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRequest'

      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The unique identifier of the todo.
      responses:
        "200":
          description: Todo updated succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Todo updated succesfully"
        "404":
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Todo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          example: "Buy groceries"
        is_completed:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2024-03-08T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-03-08T12:30:00Z"

    TodoRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          example: Buy groceries
        is_completed:
          type: boolean
          example: true

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Something went wrong"
